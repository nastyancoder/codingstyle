#ifndef _MY_COMPLEX_H_
#define _MY_COMPLEX_H_

#include <iostream>

using namespace std;

/**
 * @brief Класс для представления комплексных чисел.
 *
 * Этот класс позволяет работать с комплексными числами и поддерживает различные арифметические операции.
 * Он включает методы для установки значений, вычисления модуля, а также операторы для выполнения
 * арифметических операций с комплексными числами и числами типа double.
 */
class Complex
{
private:
    double Re; /**< Реальная часть комплексного числа */
    double Im; /**< Мнимая часть комплексного числа */

public:
    /**
     * @brief Конструктор для создания комплексного числа.
     *
     * Инициализирует комплексное число с заданными значениями для реальной и мнимой части.
     * Если значения не указаны, используются значения по умолчанию (0).
     *
     * @param aRe Реальная часть.
     * @param aIm Мнимая часть.
     */
    Complex(double aRe = 0, double aIm = 0);

    /**
     * @brief Конструктор копирования для комплексного числа.
     *
     * Создает копию другого комплексного числа.
     *
     * @param aRval Комплексное число для копирования.
     */
    Complex(const Complex&);

    /**
     * @brief Деструктор для класса Complex.
     *
     * Очищает ресурсы, если это необходимо. В данном случае, не требуется дополнительных
     * действий, так как комплексное число не использует динамическую память.
     */
    ~Complex();

    /**
     * @brief Устанавливает значения реальной и мнимой части комплексного числа.
     *
     * Этот метод используется для изменения значений реальной и мнимой части
     * комплексного числа после его создания.
     *
     * @param aRe Новое значение для реальной части.
     * @param aIm Новое значение для мнимой части (по умолчанию 0).
     */
    void Set(double aRe, double aIm = 0);

    /**
     * @brief Преобразование комплексного числа в число типа double.
     *
     * Преобразует комплексное число в его модуль (действительную величину).
     *
     * @return Модуль комплексного числа.
     */
    operator double();

    /**
     * @brief Вычисление модуля комплексного числа.
     *
     * Вычисляет модуль комплексного числа по формуле: sqrt(Re^2 + Im^2).
     *
     * @return Модуль комплексного числа.
     */
    double abs();

    /**
     * @brief Оператор ввода для комплексного числа.
     *
     * Вводит комплексное число с потока ввода. Ожидаются два числа: реальная и мнимая части.
     *
     * @param stream Поток ввода.
     * @param a Комплексное число для ввода.
     * @return Поток ввода.
     */
    friend istream& operator>>(istream&, Complex&);

    /**
     * @brief Оператор вывода для комплексного числа.
     *
     * Выводит комплексное число в поток вывода в формате "Re + Im*i".
     *
     * @param stream Поток вывода.
     * @param a Комплексное число для вывода.
     * @return Поток вывода.
     */
    friend ostream& operator<<(ostream&, Complex&);

    /**
     * @brief Оператор сложения для двух комплексных чисел.
     *
     * Осуществляет сложение двух комплексных чисел.
     *
     * @param aRval Второе комплексное число для сложения.
     * @return Результат сложения двух комплексных чисел.
     */
    Complex operator+(const Complex&);

    /**
     * @brief Оператор вычитания для двух комплексных чисел.
     *
     * Осуществляет вычитание второго комплексного числа из первого.
     *
     * @param aRval Второе комплексное число для вычитания.
     * @return Результат вычитания двух комплексных чисел.
     */
    Complex operator-(const Complex&);

    /**
     * @brief Оператор сложения для комплексного числа и числа типа double.
     *
     * Осуществляет сложение комплексного числа с числом типа double.
     *
     * @param aVal Число типа double, которое добавляется к реальной части комплексного числа.
     * @return Результат сложения.
     */
    Complex operator+(const double&);

    /**
     * @brief Оператор сложения для числа типа double и комплексного числа.
     *
     * Осуществляет сложение числа типа double с комплексным числом.
     *
     * @param aLval Число типа double.
     * @param aRval Комплексное число.
     * @return Результат сложения.
     */
    friend Complex operator+(const double&, const Complex&);

    /**
     * @brief Оператор вычитания для числа типа double и комплексного числа.
     *
     * Осуществляет вычитание комплексного числа из числа типа double.
     *
     * @param aLval Число типа double.
     * @param aRval Комплексное число.
     * @return Результат вычитания.
     */
    friend Complex operator-(const double&, const Complex&);

    /**
     * @brief Оператор умножения для двух комплексных чисел.
     *
     * Осуществляет умножение двух комплексных чисел.
     *
     * @param aRval Второе комплексное число для умножения.
     * @return Результат умножения.
     */
    Complex operator*(const Complex&);

    /**
     * @brief Оператор умножения для комплексного числа и числа типа double.
     *
     * Осуществляет умножение комплексного числа на число типа double.
     *
     * @param aVal Число типа double для умножения.
     * @return Результат умножения.
     */
    Complex operator*(const double&);

    /**
     * @brief Оператор умножения для числа типа double и комплексного числа.
     *
     * Осуществляет умножение числа типа double на комплексное число.
     *
     * @param aLval Число типа double.
     * @param a Комплексное число.
     * @return Результат умножения.
     */
    friend Complex operator*(const double&, const Complex&);

    /**
     * @brief Оператор деления для комплексного числа на число типа double.
     *
     * Осуществляет деление комплексного числа на число типа double.
     *
     * @param aVal Число типа double для деления.
     * @return Результат деления.
     */
    Complex operator/(const double&);

    /**
     * @brief Оператор присваивания для двух комплексных чисел.
     *
     * Осуществляет присваивание одного комплексного числа другому.
     *
     * @param aRval Комплексное число, которое присваивается.
     * @return Ссылка на текущий объект Complex.
     */
    Complex& operator=(const Complex&);

    /**
     * @brief Оператор присваивания для числа типа double.
     *
     * Осуществляет присваивание числа типа double реальной части комплексного числа,
     * а мнимую часть устанавливает в 0.
     *
     * @param aVal Число типа double.
     * @return Ссылка на текущий объект Complex.
     */
    Complex& operator=(const double&);
};

#endif
